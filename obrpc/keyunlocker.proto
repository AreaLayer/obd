syntax = "proto3";

//import "lightning.proto";

package obrpc;

option go_package = ".;obrpc";

/*
 * Comments in this file will be directly parsed into the API
 * Documentation as descriptions of the associated method, message, or field.
 * These descriptions should go right above the definition of the object, and
 * can be in either block or // comment format.
 *
 * An RPC method can be matched to an lncli command by placing a line in the
 * beginning of the description in exactly the following format:
 * lncli: `methodname`
 *
 * Failure to specify the exact name of the command will cause documentation
 * generation to fail.
 *
 * More information on how exactly the gRPC documentation is generated from
 * this proto file can be found here:
 * https://github.com/lightninglabs/lightning-api
 */

// WalletUnlocker is a service that is used to set up a wallet password for
// lnd at first startup, and unlock a previously set up wallet.
service WalletUnlocker {
    rpc GenSeed (GenSeedRequest) returns (GenSeedResponse);
    rpc ChangePassword (ChangePasswordRequest) returns (ChangePasswordResponse);

    /*
   InitWallet is used when lnd is starting up for the first time to fully
   initialize the daemon and its internal wallet. At the very least a wallet
   password must be provided. This will be used to encrypt sensitive material
   on disk.

   In the case of a recovery scenario, the user can also specify their aezeed
   mnemonic and passphrase. If set, then the daemon will use this prior state
   to initialize its internal wallet.

   Alternatively, this can be used along with the GenSeed RPC to obtain a
   seed, then present it to the user. Once it has been verified by the user,
   the seed can be fed into this RPC in order to commit the new wallet.
   */
    rpc InitWallet (InitWalletRequest) returns (InitWalletResponse);
    rpc UnlockWallet (UnlockWalletRequest) returns (UnlockWalletResponse);
}

message GenSeedRequest {
    /*
    seed_entropy is an optional 16-bytes generated via CSPRNG. If not
    specified, then a fresh set of randomness will be used to create the seed.
    When using REST, this field must be encoded as base64.
    */
//    bytes seed_entropy = 2;
}
message GenSeedResponse {
    /*
    words is a 12-word mnemonic.
    */
    string words = 1;
}

message InitWalletRequest {
    /*
    wallet_password is the passphrase that should be used to encrypt the
    wallet. This MUST be at least 8 chars in length. After creation, this
    password is required to unlock the daemon.
    */
    string wallet_password = 1;

    /*
    mnemonic is a 12-word mnemonic that encodes a prior aezeed
    cipher seed obtained by the user. This may have been generated by the
    GenSeed method, or be an existing seed.
    */
    string mnemonic = 2;

    /*
    seed_passphrase is an optional user provided passphrase that will be used
    to generated bip39 seed.
    */
    string seed_passphrase = 3;

}
message InitWalletResponse {
}


message UnlockWalletRequest {
    /*
    wallet_password should be the current valid passphrase for the daemon. This
    will be required to decrypt on-disk material that the daemon requires to
    function properly. When using REST, this field must be encoded as base64.
    */
    bytes wallet_password = 1;
}
message UnlockWalletResponse {
}

message ChangePasswordRequest {
    /*
    current_password should be the current valid passphrase used to unlock the
    daemon. When using REST, this field must be encoded as base64.
    */
    string current_password = 1;

    /*
    new_password should be the new passphrase that will be needed to unlock the
    daemon. When using REST, this field must be encoded as base64.
    */
    string new_password = 2;

}
message ChangePasswordResponse {
    /*
    The binary serialized admin macaroon that can be used to access the daemon
    after rotating the macaroon root key. If both the stateless_init and
    new_macaroon_root_key parameter were set to true, this is the ONLY copy of
    the macaroon that was created from the new root key and MUST be stored
    safely by the caller. Otherwise a copy of this macaroon is also persisted on
    disk by the daemon, together with other macaroon files.
    */
//    bytes admin_macaroon = 1;
}
